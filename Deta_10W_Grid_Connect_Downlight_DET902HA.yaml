sensor:
  - platform: uptime
    name: "Uptime"
    update_interval: 60s
    id: ${id_name}_uptime
    internal: true
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: ${id_name}_human_uptime
            state: !lambda |-
              int seconds = round(id(${id_name}_uptime).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m " : "") +
                (to_string(seconds) + "s")
              ).c_str();

  - platform: wifi_signal
    name: "Signal Strength"

output:
  - platform: esp8266_pwm
    pin: GPIO4
    id: output_g
  - platform: esp8266_pwm
    pin: GPIO5
    id: output_r
  - platform: esp8266_pwm
    pin: GPIO12
    id: output_ww
  - platform: esp8266_pwm
    pin: GPIO13
    id: output_b
  - platform: esp8266_pwm
    pin: GPIO14
    id: output_cw

light:
  - platform: rgbww
    name: ""
    color_interlock: true
    icon: mdi:light-recessed
    id: ${id_name}_light
    red: output_r
    green: output_g
    blue: output_b
    warm_white: output_ww
    cold_white: output_cw
    cold_white_color_temperature: 5700 K
    warm_white_color_temperature: 3000 K
    restore_mode: RESTORE_AND_ON
    effects:
      - random:
          name: Colour Change
          transition_length: 5s
          update_interval: 7s
      - lambda:
          name: Colour Cycle - RGB
          update_interval: 10s
          lambda: |-
            static int state = 0;
            auto call = id(${id_name}_light).make_call();
            call.set_transition_length(5000);
            if (state == 0) {
              call.set_red(.20);
              call.set_green(.20);
              call.set_blue(.20);
            } else if (state ==1) {
              call.set_rgb(0.0,1.0,0.0);
            } else if (state ==2) {
              call.set_rgb(0.0,0.0,1.0);
            } else if (state == 3) {
              call.set_rgb(1.0,0.0,0.0);
            }
            call.perform();
            state += 1;
            if (state == 4)
              state =0;
      - pulse:
          name: "Slow Pulse"
          transition_length: 5s
          update_interval: 2s
          
button:
  - platform: restart
    entity_category: diagnostic
    name: "Restart"

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "IP Address"
  - platform: template
    name: "Uptime"
    id: ${id_name}_human_uptime
    icon: mdi:timer-outline
    internal: true
    entity_category: diagnostic
  - platform: template
    name: "mDNS"
    internal: true
    entity_category: diagnostic
    lambda: return {"http://${device_name}.local/"};
